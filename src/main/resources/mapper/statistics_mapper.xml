<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC	"-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="kr.co.cocean.statistics.dao.StatisticsDAO">
	<!-- 통계 데이터 가져오기 -->
	<select id="animalHistory" resultType="AnimalHistoryDTO">
		SELECT am.branchID, b.branchName,
		COUNT(CASE WHEN am.status != '폐사' THEN 1 END) AS totalNumber,
	    COUNT(CASE WHEN am.status = '정상' THEN 1 END) AS normalNumber,
	    COUNT(CASE WHEN am.status = '질병' THEN 1 END) AS illedNumber,
	    COUNT(CASE WHEN am.status = '폐사' THEN 1 END) AS deadNumber
		FROM animalManagement am
		JOIN branch b ON b.branchID = am.branchID
		GROUP BY am.branchID, b.branchName
	</select>
	
	<select id="tankHistory" resultType="TankHistoryDTO">
		SELECT b.branchName, b.branchID,
	    COUNT(tm.tankStatus) AS totalNumber,
	    COUNT(CASE WHEN tm.tankStatus = '정상' THEN 1 END) AS normalNumber,
	    COUNT(CASE WHEN tm.tankStatus = '이상' THEN 1 END) AS abnormalNumber,
	    COUNT(CASE WHEN tm.categoryID = 1 THEN 1 END) AS seaWaterTankNumber,
	    COUNT(CASE WHEN tm.categoryID = 2 THEN 1 END) AS freshWaterTankNumber,
	    COUNT(CASE WHEN tm.categoryID = 3 THEN 1 END) AS semiAquaticTankNumber,
	    COUNT(CASE WHEN tm.categoryID = 4 THEN 1 END) AS landTankNumber
		FROM tankManagement tm
		INNER JOIN branch b ON b.branchID = tm.branchID
		GROUP BY b.branchName, b.branchID
	</select>
	

	<select id="productHistory" resultType="sales">
		SELECT yearMonth, salesYear, salesMonth, branchName,
    	SUM(totalSalesAmount) AS monthlyTotalSales
		FROM (
		    SELECT 
		        DATE_FORMAT(ph.salesRegDate, '%Y-%m') AS yearMonth,
		        YEAR(ph.salesRegDate) AS salesYear,
		        MONTH(ph.salesRegDate) AS salesMonth,
		        bp.productID,
		        b.branchName,
		        SUM(ph.salesNumber * pi.price) AS totalSalesAmount
		    FROM productHistory ph
		    JOIN branchProduct bp ON ph.productIndex = bp.productIndex
		    JOIN productInformation pi ON bp.productID = pi.productID
		    JOIN branch b ON bp.branchID = b.branchID
		    WHERE DATE_FORMAT(ph.salesRegDate, '%Y-%m') >= DATE_FORMAT(DATE_SUB(now(), INTERVAL 5 MONTH), '%Y-%m')
		    GROUP BY yearMonth, bp.productID, b.branchName
		) AS subquery
		WHERE yearMonth >= DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 5 MONTH), '%Y-%m')
		GROUP BY yearMonth, salesYear, salesMonth, branchName
		ORDER BY yearMonth, branchName
    
    
	</select>

	<select id="ticketHistory" resultType="sales">
    SELECT yearMonth, salesYear, salesMonth, branchName,
    SUM(totalSalesAmount) AS monthlyTotalSales
	FROM (
	    SELECT 
	        DATE_FORMAT(th.salesRegDate, '%Y-%m') AS yearMonth,
	        YEAR(th.salesRegDate) AS salesYear,
	        MONTH(th.salesRegDate) AS salesMonth,
	        bp.productID,
	        b.branchName,
	        SUM(th.salesNumber * pi.price) AS totalSalesAmount
	    FROM ticketHistory th
	    JOIN branchProduct bp ON th.productIndex = bp.productIndex
	    JOIN productInformation pi ON bp.productID = pi.productID
	    JOIN branch b ON bp.branchID = b.branchID
	    WHERE DATE_FORMAT(th.salesRegDate, '%Y-%m') >= DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 5 MONTH), '%Y-%m')
	    GROUP BY yearMonth, bp.productID, b.branchName
	) AS subquery
	WHERE yearMonth >= DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 5 MONTH), '%Y-%m')
	GROUP BY yearMonth, salesYear, salesMonth, branchName
	ORDER BY yearMonth, branchName
	
	</select>
	
	<select id="visitorsHistory" resultType="sales">
    SELECT yearMonth, entryYear, entryMonth, branchName,
    SUM(visitorsNumber) AS monthlyVisitorsNumber
	FROM (
	    SELECT 
	        DATE_FORMAT(vh.entryDate, '%Y-%m') AS yearMonth,
	        YEAR(vh.entryDate) AS entryYear,
	        MONTH(vh.entryDate) AS entryMonth,
	        bp.productID,
	        b.branchName,
	        vh.visitorsNumber
	    FROM visitorsHistory vh
	    JOIN branchProduct bp ON vh.productIndex = bp.productIndex
	    JOIN productInformation pi ON bp.productID = pi.productID
	    JOIN branch b ON bp.branchID = b.branchID
	    WHERE DATE_FORMAT(vh.entryDate, '%Y-%m') >= DATE_FORMAT(DATE_SUB(now(), INTERVAL 5 MONTH), '%Y-%m')
	    GROUP BY yearMonth, bp.productID, b.branchName
	) AS subquery
	WHERE yearMonth >= DATE_FORMAT(DATE_SUB(now(), INTERVAL 5 MONTH), '%Y-%m')
	GROUP BY yearMonth, entryYear, entryMonth, branchName
	ORDER BY yearMonth, branchName
	</select>

</mapper>