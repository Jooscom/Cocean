<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC	"-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="kr.co.cocean.personnel.dao.PersonnelDAO">	
	

	
	<insert id="join" parameterType="map">
		INSERT INTO employee VALUES(#{employeeID},#{positionID},#{password},#{name},#{status},#{joinDate},#{phoneNumber},#{address},#{remainingAnnualLeave},#{departmentID},#{rankID},#{responID})
	</insert>
	 <select id="getBranch">
        SELECT branchName , branchID FROM branch
    </select>
	

	<select id="getBranchID">
		SELECT hqName,hqID FROM headquarters h WHERE branchID =#{branchID}
	</select>
	
	<select id="getBranchOrgID">
		SELECT hqName ,hqID FROM headquarters h WHERE branchID =#{branchID} and isActive = 1 AND h.hqName NOT LIKE '-%'
	</select>
	
	<select id="getHqID">
		select  departmentName ,departmentID FROM department d WHERE hqID=#{hqID} and isActive = 1
	</select>
	
	<select id="getDepartmentText">
		SELECT responName,responID from responsibility r JOIN department d ON r.departmentID =d.departmentID where d.departmentName =#{departmentText}
	</select>
	
	<select id="getChart">

				    SELECT * FROM (
		    SELECT employeeID AS id, 
		           CASE 
		               WHEN e.positionID = 5 THEN '#' 
		               WHEN e.positionID = 4 THEN CONCAT('br', h.branchID)
		               ELSE CONCAT('de', e.departmentID)
		           END AS parent, 
		           CONCAT(name, ' ', (SELECT p.positionName FROM `position` p WHERE p.positionID = e.positionID)) AS 'text', 
		           'fas fa-user-tie' AS 'icon'
		    FROM employee e 
		    LEFT JOIN department d ON e.departmentID = d.departmentID
		    LEFT JOIN headquarters h ON d.hqID = h.hqID
		    WHERE e.status = '재직'
		    <if test="isActive == 0">  AND NOT employeeID REGEXP '^[0-9]+$' </if>
		) AS data
		UNION ALL
		SELECT CONCAT('de',departmentID) AS id, 
		       CONCAT('hq',hqID) AS parent, 
		       departmentName AS 'text', 
		       'fas 
fa-building' AS 'icon'
		FROM department d 
		WHERE   d.departmentName NOT LIKE '-%' <if test="isActive == 1"> AND d.isActive = 1</if>
		UNION ALL
		SELECT CONCAT('hq',hqID) AS id, 
		       CONCAT('br',branchID) AS parent, 
		       hqName AS 'text', 
		       'fas 
fa-building' AS 'icon'
		FROM headquarters h 
		WHERE  h.hqName NOT LIKE '%-%' <if test="isActive == 1"> AND h.isActive = 1</if>
		UNION ALL
		SELECT CONCAT('br',branchID) AS id, 
		       '#' AS parent, 
		       branchName AS 'text', 
		       'fas 
fa-building' AS 'icon'
		FROM branch b
			</select>

	
	<select id="personnelList">
		SELECT e.employeeID,e.name,d.departmentName, r.rankName,p.positionName,e.status ,b.branchName
		FROM employee e
		JOIN department d ON e.departmentID = d.departmentID
		JOIN headquarters h ON d.hqID =h.hqID 
		JOIN branch b  ON h.branchID = b.branchID 
		JOIN `position` p ON e.positionID = p.positionID 
		JOIN `rank` r  ON e.rankID = r.rankID
    <where>
        <if test="search != null and !search.equals('')">
            <choose>
                <when test="category != null and category.equals('name')">
                    AND e.name LIKE CONCAT('%', #{search}, '%') 
                </when>
                <when test="category != null and category.equals('employeeID')">
                    AND e.employeeID LIKE CONCAT(#{search}, '%')
                </when>
            </choose>
        </if>
        <if test="!(branch == 0)">
		    AND b.branchID = #{branch}
		</if>
    </where>
		ORDER BY e.employeeID ASC LIMIT #{pageNum},10
	</select>

	
	
	
<select id="totalCountSearch" resultType="java.lang.Integer">
    SELECT CEIL(COUNT(*)/10)
    FROM employee e
    JOIN department d ON e.departmentID = d.departmentID
    JOIN headquarters h ON d.hqID = h.hqID 
    JOIN branch b ON h.branchID = b.branchID 
    JOIN `position` p ON e.positionID = p.positionID 
    JOIN `rank` r ON e.rankID = r.rankID
    <where>
        <if test="search != null and !search.equals('')">
            <choose>
                <when test="category != null and category.equals('name')">
                    AND e.name LIKE CONCAT('%', #{search}, '%')
                </when>
                <when test="category != null and category.equals('employeeID')">
                    AND e.employeeID LIKE CONCAT(#{search}, '%')
                </when>
            </choose>
                 </if>   
         <if test="!(branch == 0)">
		    AND b.branchID = #{branch}
		</if>

    </where>
    ORDER BY e.employeeID;
</select>

	<select id="checkDuplicateEmployeeID">
		select (COUNT(employeeID))  from employee e WHERE employeeID =#{employeeID}
	</select>
	
	<select id="checkDuplicateAddpositionID">
		select (COUNT(positionID))  from position WHERE positionID =#{addpositionID}
	</select>
	
	<select id="checkDuplicateAddRankID">
		select (COUNT(rankID))  from rank WHERE rankID =#{addRankID}
	</select>
	
	<insert id="upload">
		INSERT INTO file(category, idx, path, serverFileName, oriFileName)
			values(#{category},#{idx},#{path},#{serverFileName},#{oriFileName})
	</insert>
	
	<update id="update">
		    UPDATE file
	    SET serverFileName = #{serverFileName}
	    WHERE idx = #{idx} AND category = #{category} AND path = #{path}
	</update>
	
	<update id="updateEmployeeInfo">
		UPDATE employee SET positionID = #{positionID}
		,status=#{status}
		,departmentID=#{departmentID}
		,rankID=#{rankID}
		,responID=#{responID}
		WHERE employeeID =#{employeeID}
	</update>
	
	<select id="datail">
				SELECT 
		    e.employeeID, e.name, p.positionName,p.positionID, r.rankName,r.rankID, e.address, e.phoneNumber, b.branchName,b.branchID, d.departmentName,d.departmentID, h.hqName,h.hqID,res.responID, res.responName,
		    f_profile.serverFileName AS profileImage, f_signature.serverFileName AS signatureImage,e.joinDate,e.status,e.remainingAnnualLeave
		FROM employee e
		JOIN department d ON e.departmentID = d.departmentID
		JOIN headquarters h ON d.hqID = h.hqID 
		JOIN branch b ON h.branchID = b.branchID 
		JOIN responsibility res ON e.responID = res.responID
		JOIN `position` p ON e.positionID = p.positionID 
		JOIN `rank` r ON e.rankID = r.rankID
		LEFT JOIN file f_profile ON f_profile.idx = e.employeeID AND f_profile.path = 'profile'
		LEFT JOIN file f_signature ON f_signature.idx = e.employeeID AND f_signature.path = 'signature'
		WHERE e.employeeID = #{employeeID};
		
	</select>
	
	<select id="employeeHistory">
		SELECT historyID,startDate ,endDate ,organizationName ,remarks  FROM employeeHistory WHERE category ='학력' AND employeeID =#{employeeID}
	</select>
	<select id="ajaxGetscHistory">
		SELECT historyID,startDate ,endDate ,organizationName ,remarks  FROM employeeHistory WHERE category ='학력' AND employeeID =#{employeeID}	
	</select>
	<select id="ajaxGetHistory">
		SELECT historyID,startDate ,endDate ,organizationName ,remarks  FROM employeeHistory WHERE category ='이력' AND employeeID =#{employeeID}
	</select>

	<select id="workHistory">
		SELECT historyID,startDate ,endDate ,organizationName ,remarks  FROM employeeHistory WHERE category ='이력' AND employeeID =#{employeeID}
	</select>
	
	<select id="getPositionName">
		SELECT positionID ,positionName,isActive  from `position` p
	</select>
	
	<select id="getPositionNameActive">
		SELECT positionID ,positionName,isActive  from `position` p where isActive = 1
	</select>
	
	<select id="getRankName">
		SELECT rankID,rankName,isActive from rank
	</select>
	
	<select id="getRankNameActive">
		SELECT rankID,rankName,isActive from rank WHERE isActive = 1
	</select>
	
	<select id="departmentChangeLog">
	SELECT DATE_FORMAT(dcl.changeDate, '%Y-%m-%d') AS changeDate,
	       beforeD.departmentName AS beforedpID,
	       afterD.departmentName AS afterdpID,
	       dcl.logID
	FROM departmentChangeLog dcl
	JOIN department beforeD ON beforeD.departmentID = dcl.beforedpID
	JOIN department afterD ON afterD.departmentID = dcl.afterdpID
	WHERE dcl.employeeID = #{employeeID};
	</select>
	
	<select id="departmentChangeLogAX">
			SELECT DATE_FORMAT(dcl.changeDate, '%Y-%m-%d') AS changeDate,
	       beforeD.departmentName AS beforedpID,
	       afterD.departmentName AS afterdpID,
	       dcl.logID
			FROM departmentChangeLog dcl
			JOIN department beforeD ON beforeD.departmentID = dcl.beforedpID
			JOIN department afterD ON afterD.departmentID = dcl.afterdpID
			WHERE dcl.employeeID = #{employeeID};
	</select>
	<insert id="historySave">
		INSERT INTO employeeHistory (employeeID,startDate,endDate,organizationName,remarks,category) VALUES (#{employeeID},#{startDate},#{endDate},#{organizationName},#{remarks},#{category});
	</insert>
	
	<insert id="schistorySave">
		INSERT INTO employeeHistory (employeeID,startDate,endDate,organizationName,remarks,category) VALUES (#{employeeID},#{startDate},#{endDate},#{organizationName},#{remarks},#{sccategory});
	</insert>
	
	<insert id="writeDepartmentChangeLog">
		insert into departmentChangeLog (employeeID,beforedpID,afterdpID) values(#{employeeID},#{beforedpID},#{afterdpID});
	</insert>
	
	<update id="resetPassword">
		UPDATE employee SET password = #{password} WHERE employeeID = #{employeeID}
	</update>
	
	<select id="getdepartmentInfo">
		select d.departmentID,d.departmentName,d.isActive,h.hqName from department d JOIN headquarters h ON d.hqID =h.hqID where departmentID = #{departmentID}
		
	</select>
	
	<select id="gethqInfo">
		SELECT h.hqID ,h.hqName ,h.isActive ,b.branchName from headquarters h JOIN branch b ON h.branchID =b.branchID  where hqID =#{hqID}
	</select>
	
	<select id="updateRank" resultType="Integer">
		UPDATE rank
		SET rankName = #{rankName}, isActive = #{isActive}
		WHERE rankID = #{rankID}
	</select>
	
	<select id="updatePosition">
		UPDATE position
		SET positionName = #{positionName}, isActive = #{isActive}
		WHERE positionID = #{positionID}
	</select>
	
	<insert id="addPostion">
		INSERT INTO `position` (positionID,positionName,isActive) values (#{positionID},#{positionName},#{isActive});
	</insert>
	
	<insert id="addRank">
		INSERT INTO `rank` (rankID,rankName,isActive) values (#{rankID},#{rankName},#{isActive});
	</insert>
	
	<insert id="addDepartment" useGeneratedKeys="true" keyColumn="departmentID" keyProperty="departmentID" parameterType="department">
    INSERT INTO department (departmentName, isActive, hqID)
    VALUES (#{departmentName}, #{isActive}, #{hqID})
	</insert>
	
	<insert id="addhq">
		INSERT into headquarters  (hqName,branchID,isActive) VALUES (#{hqName},#{branchID},#{isActive});
	</insert>
	
	<update id="updateInfo">
		update employee set name = #{name},
		phoneNumber = #{phoneNumber},
		address = #{address}
		WHERE employeeID = #{employeeID}
	</update>
	
	<update id="editHq">
		update headquarters SET hqName = #{hqName} ,isActive =#{isActive} WHERE hqID =#{hqID}
	</update>
	<update id="editDp">
		update department SET departmentName = #{departmentName} ,isActive =#{isActive} WHERE departmentID =#{departmentID}
	</update>
	
	<select id="getDepartmentMembers">
		SELECT count(name)  FROM employee e 
		JOIN department d ON e.departmentID = d.departmentID
		JOIN `position` p ON p.positionID  = e.positionID 
		WHERE d.departmentID =#{departmentID}
	</select>

	<insert id="addResponsibiliy">
		INSERT INTO responsibility (departmentID,responName) VALUES (#{departmentID},#{responName})
	</insert>
	
	<update id="updateEmployeeAnnual">
		update employee set remainingAnnualLeave = 0;
	</update>
	
	<select id="leaveYears">
		SELECT joinDate
		FROM employee e 
		WHERE joinDate;
	</select>
	
	<update id="saveAnnualLeave" parameterType="java.util.List">
		<foreach collection="list" index="index" item="item" separator=";">
		UPDATE annualLeave SET year =#{item.year}, value=#{item.value}
		WHERE year = #{item.year}
		</foreach>
	</update>
	
	<select id="getYearValue">
		SELECT year,value FROM annualLeave;
	</select>


	<select id="getEmployeeAnnual" >
	    SELECT value
		FROM annualLeave
		WHERE year = (
		    SELECT FLOOR(DATEDIFF(NOW(), joinDate) / 365) AS years 
		    FROM employee 
		    WHERE  employeeID = #{employeeID}
		); 
	</select>
	
	<update id="updateAnnual" parameterType="String">
	        UPDATE employee
	        SET remainingAnnualLeave = #{value}
	        WHERE FLOOR(DATEDIFF(NOW(), joinDate) / 365) = #{year}
	</update>
	
	<select id="findAttend">
		SELECT ad.category ,ad.vacationStartDate ,ad.vacationEndDate ,ad.usageTime  
		FROM attendanceDraft ad JOIN draft d ON ad.idx =d.idx WHERE employeeID =#{employeeID}
		AND ad.vacationStartDate BETWEEN #{startYear} AND #{endYear}
	</select>
	
	<delete id="delHistory">
		DELETE from employeeHistory where historyID = #{historyID}
	</delete>
	
	<delete id="delscHistory">
		DELETE from employeeHistory where historyID = #{historyID}
	</delete>
	
		<delete id="delDepartmentLog">
		DELETE FROM departmentChangeLog WHERE logID = #{logID}
	</delete>
	
	<select id="getHqMembers">
		SELECT count(*) from department d JOIN headquarters h ON d.hqID =h.hqID WHERE h.hqID =#{hqID};
	</select>

	

</mapper>